name: Build wheels

# Builds wheels and sends to QE and Aerospike artifactory
on:
  workflow_dispatch:

jobs:
  manylinux_arm64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          "cp37",
          "cp38",
          "cp39",
          "cp310"
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up QEMU for cross compiling arm64
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Set up Aerospike server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for server to start
      run: sleep 5

    - name: Set config.conf to use Docker IP address of Aerospike server
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        pip install crudini
        crudini --set config.conf community-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-manylinux_aarch64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "aarch64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-aarch64-${{ matrix.python }}

  manylinux_x86_64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"]
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Aerospike server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for server to start
      run: sleep 5

    - name: Set config.conf to use Docker IP address of Aerospike server
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        pip install crudini
        crudini --set config.conf community-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python[0] }}-manylinux_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "x86_64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-x86_64-${{ matrix.python[0] }}

  macOS-x86:
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
        ]
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version[1] }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version[1] }}

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python-version[0] }}-macosx_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        CIBW_ARCHS: "x86_64"
        CIBW_BEFORE_TEST: >
          vagrant up &&
          sleep 3 &&
          pip install -r test/requirements.txt
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          python -m pytest new_tests/

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-x86_64-${{ matrix.python-version[0] }}
        path: wheelhouse/*.whl

  macOS-m1:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
          macos-latest,
        ]
        # Python versions to build wheels on
        python: [
          "cp38",
          "cp39",
          "cp310"
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-macosx_arm64
        CIBW_BUILD_FRONTEND: build
        # Set env variables before building
        CIBW_BEFORE_ALL_MACOS: >
          git clone https://github.com/passepartoutvpn/openssl-apple &&
          cd openssl-apple &&
          export CONFIG_OPTIONS="no-shared" &&
          ./build-libssl.sh --version=1.1.1q --targets="macos64-arm64" --macos-sdk=$(xcrun --show-sdk-version) ||
          cat "./bin/MacOSX$(xcrun --show-sdk-version)-arm64.sdk/build-openssl-1.1.1q.log"
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(pwd)/openssl-apple/bin/MacOSX$(xcrun --show-sdk-version)-arm64.sdk/lib/" CPATH="$(pwd)/openssl-apple/bin/MacOSX$(xcrun --show-sdk-version)-arm64.sdk/include/" STATIC_SSL=1
        CIBW_ARCHS: "arm64"

    # TODO: need ssh key
    - name: Get Terraform config to test M1 wheels
      run: |
        cd ..
        git clone https://github.com/citrusleaf/devops

    # TODO: setup Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - run: terraform init
      working-directory: ../devops

    - run: terraform apply -auto-approve
      working-directory: ../devops

    - name: Get IP address of Mac M1 instance
      run: M1_IP=$(terraform output -raw mac-ip-address) >> $GITHUB_ENV
      working-directory: ../devops

    - name: Get IP address of server
      run: SERVER_IP=$(terraform output -raw aerospike-ip-address) >> $GITHUB_ENV
      working-directory: ../devops

    - name: Get raw contents of private key
      run: M1_PK=$(cat "Terraform EC2.pem") >> $GITHUB_ENV
      working-directory: ../devops

    # TODO: wait
    - name: Wait for mac M1 to be ready to connect to

    - name: SSH into mac M1
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: "${{ env.M1_IP }}"
        username: "ec2-user"
        password: ""
        key: "${{ env.M1_PK }}"
        script: |
          # Configure aws cli
          

          function setflag() {
            host_id=$(curl -w '\n' -s http://169.254.169.254/latest/meta-data/placement/host-id)
            aws 
          }

          git clone --recurse-submodules "https://github.com/aerospike/aerospike-client-python.git"
          cd aerospike-client-python/
          openssl_install_path=$(brew --prefix openssl@1.1)
          export STATIC_SSL=1
          export SSL_LIB_PATH="$openssl_install_path/lib/"
          export CPATH="$openssl_install_path/include/"

          brew install python@3.8
          brew install python@3.9
          python3.9 -m pip install delocate

          python_versions=('3.8' '3.9')
          for version in "${python_versions[@]}"; do
            python${version} -m pip install build
            python${version} -m build
            delocate-wheel --require-archs "arm64" -w wheelhouse/ -v dist/*.whl
            python${version} -m pip install wheelhouse/*.whl

            cd test/
            sed -i "s/hosts : 127.0.0.1:3000/hosts : ${{ env.SERVER_IP }}/" config.conf
            python${version} -m pip install -r requirements.txt
            python${version} -m pytest new_tests/

            # Fail this workflow if the tests failed
            result=$(echo $?)
            if [[ $result -ne 0 ]]; then
              # Set flag to destroy this instance and host
              curl -w '\n' -s http://169.254.169.254/latest/meta-data/instance-id

              exit $result
            fi
            cd ..
          done

          # All wheels passed
          # Set flag
            cat instance-id

      working-directory: ../devops


    # TODO: exit ssh

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-arm64-${{ matrix.python }}
        path: wheelhouse/*.whl

  send-to-qe:
    needs: [manylinux_x86_64, manylinux_arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: echo "Upload to QE"
      # - uses: shallwefootball/s3-upload-action@master
      #   with:
      #     aws_key_id: ${{ secrets.AWS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ secrets.AWS_BUCKET }}
      #     # Send all distributions to QE build system
      #     source_dir: './wheelhouse'

  send-to-artifactory:
    needs: [manylinux_x86_64, manylinux_arm64, macOS-x86, macOS-m1]
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: wheelhouse/

      - name: Reorganize artifacts
        # Move wheels from their folders into base folder
        run: |
          find wheelhouse/ -type f -exec mv {} . \;
          rm -r wheelhouse/

      # Store sensitive data in openvpn config template
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - uses: bluwy/substitute-string-action@v1
        id: sub
        with:
          _input-file: ".github/workflows/aerospike.ovpn"
          _format-key: '%%key%%'
          VPN_URL: ${{ secrets.VPN_URL }}
          CA_CERT: ${{ secrets.CA_CERT }}
          CERT: ${{ secrets.CERT }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          OPENVPN_STATIC_KEY: ${{ secrets.OPENVPN_STATIC_KEY }}
          _output-file: ".github/workflows/aerospike.ovpn"

      - name: Connect to Aerospike VPN
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: ".github/workflows/aerospike.ovpn"
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Upload artifacts to Aerospike artifactory
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: wheelhouse/
          remote_path: /var/www/artifacts/development/aerospike-client-python/
          remote_host: ${{ secrets.ARTIFACTORY_HOST_IP }}
          remote_user: ${{ secrets.ARTIFACTORY_USERNAME }}
          remote_key: ${{ secrets.ARTIFACTORY_PRIVATE_KEY }}

      - name: Verify artifacts are uploaded
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.ARTIFACTORY_HOST_IP }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ''
          key: ${{ secrets.ARTIFACTORY_PRIVATE_KEY }}
          script: "ls /var/www/artifacts/development/aerospike-client-python/"
